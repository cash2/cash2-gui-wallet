// Copyright (c) 2011-2016 The Cryptonote developers
// Copyright (c) 2018 The Cash2 developers
// Distributed under the MIT/X11 software license, see the accompanying
// file COPYING or http://www.opensource.org/licenses/mit-license.php.

#include <string>

#include "gtest/gtest.h"

#include "crypto/chacha8.h"

static const uint8_t key0[] = {0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const uint8_t iv0[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const uint8_t plainText0[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const size_t plainTextLength0 = sizeof(plainText0);
static const uint8_t cipherText0[] = {0x65, 0x3f, 0x4a, 0x18, 0xe3, 0xd2, 0x7d, 0xaf, 0x51, 0xf8, 0x41, 0xa0, 0x0b, 0x6c, 0x1a, 0x2b, 0xd2, 0x48, 0x98, 0x52, 0xd4, 0xae, 0x07, 0x11, 0xe1, 0xa4, 0xa3, 0x2a, 0xd1, 0x66, 0xfa, 0x6f, 0x88, 0x1a, 0x28, 0x43, 0x23, 0x8c, 0x7e, 0x17, 0x78, 0x6b, 0xa5, 0x16, 0x2b, 0xc0, 0x19, 0xd5, 0x73, 0x84, 0x9c, 0x16, 0x76, 0x68, 0x51, 0x0a, 0xda, 0x2f, 0x62, 0xb4, 0xff, 0x31, 0xad, 0x04};

static const uint8_t key1[] = {0x0f, 0x62, 0xb5, 0x08, 0x5b, 0xae, 0x01, 0x54, 0xa7, 0xfa, 0x4d, 0xa0, 0xf3, 0x46, 0x99, 0xec, 0x3f, 0x92, 0xe5, 0x38, 0x8b, 0xde, 0x31, 0x84, 0xd7, 0x2a, 0x7d, 0xd0, 0x23, 0x76, 0xc9, 0x1c};
static const uint8_t iv1[] = {0x28, 0x8f, 0xf6, 0x5d, 0xc4, 0x2b, 0x92, 0xf9};
static const uint8_t plainText1[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const size_t plainTextLength1 = sizeof(plainText1);
static const uint8_t cipherText1[] = {0xdb, 0x16, 0x58, 0x14, 0xf6, 0x67, 0x33, 0xb7, 0xa8, 0xe3, 0x4d, 0x1f, 0xfc, 0x12, 0x34, 0x27, 0x12, 0x56, 0xd3, 0xbf, 0x8d, 0x8d, 0xa2, 0x16, 0x69, 0x22, 0xe5, 0x98, 0xac, 0xac, 0x70, 0xf4, 0x12, 0xb3, 0xfe, 0x35, 0xa9, 0x41, 0x90, 0xad, 0x0a, 0xe2, 0xe8, 0xec, 0x62, 0x13, 0x48, 0x19, 0xab, 0x61, 0xad, 0xdc, 0xcc, 0xfe, 0x99, 0xd8, 0x67, 0xca, 0x3d, 0x73, 0x18, 0x3f, 0xa3, 0xfd};

static const uint8_t key2[] = {0x0f, 0x62, 0xb5, 0x08, 0x5b, 0xae, 0x01, 0x54, 0xa7, 0xfa, 0x4d, 0xa0, 0xf3, 0x46, 0x99, 0xec, 0x3f, 0x92, 0xe5, 0x38, 0x8b, 0xde, 0x31, 0x84, 0xd7, 0x2a, 0x7d, 0xd0, 0x23, 0x76, 0xc9, 0x1c};
static const uint8_t iv2[] = {0x28, 0x8f, 0xf6, 0x5d, 0xc4, 0x2b, 0x92, 0xf9};
static const uint8_t plainText2[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const size_t plainTextLength2 = sizeof(plainText2);
static const uint8_t cipherText2[] = {0xdb, 0x16, 0x58, 0x14, 0xf6, 0x67, 0x33, 0xb7, 0xa8, 0xe3, 0x4d, 0x1f, 0xfc, 0x12, 0x34, 0x27, 0x12, 0x56, 0xd3, 0xbf, 0x8d, 0x8d, 0xa2, 0x16, 0x69, 0x22, 0xe5, 0x98, 0xac, 0xac, 0x70, 0xf4, 0x12, 0xb3, 0xfe, 0x35, 0xa9, 0x41, 0x90, 0xad, 0x0a, 0xe2, 0xe8, 0xec, 0x62, 0x13, 0x48, 0x19, 0xab, 0x61, 0xad, 0xdc, 0xcc, 0xfe, 0x99, 0xd8, 0x67, 0xca, 0x3d, 0x73, 0x18, 0x3f, 0xa3, 0xfd, 0x82, 0x87, 0x0F};

static const uint8_t key3[] = {0x0f, 0x62, 0xb5, 0x08, 0x5b, 0xae, 0x01, 0x54, 0xa7, 0xfa, 0x4d, 0xa0, 0xf3, 0x46, 0x99, 0xec, 0x3f, 0x92, 0xe5, 0x38, 0x8b, 0xde, 0x31, 0x84, 0xd7, 0x2a, 0x7d, 0xd0, 0x23, 0x76, 0xc9, 0x1c};
static const uint8_t iv3[] = {0x28, 0x8f, 0xf6, 0x5d, 0xc4, 0x2b, 0x92, 0xf9};
static const uint8_t plainText3[] = {0x00};
static const size_t plainTextLength3 = sizeof(plainText3);
static const uint8_t cipherText3[] = {0xdb};

TEST(chacha8, 0)
{ 
  std::string buf;
  buf.resize(plainTextLength0);

  Crypto::chacha8(plainText0, plainTextLength0, key0, iv0, &buf[0]);
  ASSERT_EQ(buf, std::string(reinterpret_cast<const char*>(cipherText0), plainTextLength0));

  Crypto::chacha8(cipherText0, plainTextLength0, key0, iv0, &buf[0]);
  ASSERT_EQ(buf, std::string(reinterpret_cast<const char*>(plainText0), plainTextLength0));
}

TEST(chacha8, 1)
{
  std::string buf;
  buf.resize(plainTextLength1);

  Crypto::chacha8(plainText1, plainTextLength1, key1, iv1, &buf[0]);
  ASSERT_EQ(buf, std::string(reinterpret_cast<const char*>(cipherText1), plainTextLength1));

  Crypto::chacha8(cipherText1, plainTextLength1, key1, iv1, &buf[0]);
  ASSERT_EQ(buf, std::string(reinterpret_cast<const char*>(plainText1), plainTextLength1));
}

TEST(chacha8, 2)
{
  std::string buf;
  buf.resize(plainTextLength2);

  Crypto::chacha8(plainText2, plainTextLength2, key2, iv2, &buf[0]);
  ASSERT_EQ(buf, std::string(reinterpret_cast<const char*>(cipherText2), plainTextLength2));

  Crypto::chacha8(cipherText2, plainTextLength2, key2, iv2, &buf[0]);
  ASSERT_EQ(buf, std::string(reinterpret_cast<const char*>(plainText2), plainTextLength2));
}

TEST(chacha8, 3)
{
  std::string buf;
  buf.resize(plainTextLength3);

  Crypto::chacha8(plainText3, plainTextLength3, key3, iv3, &buf[0]);
  ASSERT_EQ(buf, std::string(reinterpret_cast<const char*>(cipherText3), plainTextLength3));

  Crypto::chacha8(cipherText3, plainTextLength3, key3, iv3, &buf[0]);
  ASSERT_EQ(buf, std::string(reinterpret_cast<const char*>(plainText3), plainTextLength3));
}

int main(int argc, char** argv)
{
  ::testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}